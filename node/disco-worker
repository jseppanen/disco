#!/usr/bin/env python
import os, sys

from disconode import disco_worker as dw
from disconode.util import ensure_path, ensure_file 

from disconode.disco_worker import JOB_ROOT, OOB_FILE, PARAMS_FILE, CHDIR_PATH
from disco.netstring import decode_netstring_fd
from disco import util, comm


def run(method, mode, part, jobpack):
        if int(jobpack['profile']):
                try:
                        import cProfile as prof
                except:
                        import profile as prof

                key = "profile-%s-%s" % (mode, part)
                prof.run("method(m)", OOB_FILE % key)
                dw.put(key, None) 
        else:
                method(jobpack)

if __name__ == "__main__":
        if len(sys.argv) < 7:
                util.err("Invalid command line. "\
                         "Usage: disco_worker [map|reduce] "\
                         "name hostname master_url partid inputs..")

      
        # Announce my PID to the master
        print >> sys.stderr, "**<PID>%s" % os.getpid()
        
        mode = sys.argv[1]
        name = sys.argv[2]
        master_url = sys.argv[4]
        part = sys.argv[5]

        try: 
                ensure_path(OOB_FILE % "", False)
                os.chdir(CHDIR_PATH)
        except Exception, e:
                util.data_err("Failed to initialize worker directories "\
                                "(disk full?)", "")
        
        try:
                if util.resultfs_enabled:
                        x, x, root = util.load_conf()
                        url = "%s/data/%s/params" % (root, "/".join(\
                                master_url.strip("/").split("/")[-3:]))
                        fn = lambda: file(url).read()
                else:
                        url = "%s/params" % master_url
                        fn = lambda: comm.download(url)
                ensure_file(PARAMS_FILE, fn, mode = 444)
        except Exception, e:
                util.data_err("Failed to get %s: %s" % (url, e), master_url)

        try:
                m = decode_netstring_fd(file(PARAMS_FILE))
        except Exception, e:
                util.data_err("Decoding the job description failed", master_url)
        
        job_name = util.job_name = m['name']
        dw.status_interval = int(m['status_interval']) 

        my_ver = ".".join(map(str, sys.version_info[:2]))
        if m["version"] != my_ver:
                util.msg("Python version mismatch: client = %s vs. node = %s" %\
                                (m["version"], my_ver), "DAT")
                sys.exit(1)

        method = getattr(dw, 'op_' + mode, None)
        if method is None:
                util.err("Invalid operation: %s" % mode)

        try:
                run(method, mode, part, m)
        except comm.CommException, x:
                util.data_err("HTTP error: %s" % x)
        except IOError, x:
                util.data_err("IO error: %s" % x)
        
        util.msg("Worker done", "END")
